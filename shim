#!/bin/sh

# The following variables are defined:
#
# In os-settings:
# PATH     the file path to be searched by this script
# SVCDEF   the location of all service definitions
# SVCDIR   the location of all active services

# In supervisor-settings:
# SVCCTRL   the command used to control the supervisor
# SVCSTATUS the command to return the status of the supervised daemon
# CMDSTART  the command to be issued to the supervisor for staring the daemon
# CMDSTOP   the command to be issued to the supervisor for stopping the daemon

# What is my name?
MYNAME=$( basename $0 )

# Where do I live? (i.e. where is my init.d collection)
MYHOME=$( dirname $0 )

# load settings for distribution
# includes PATH
. $MYHOME/os-settings

# detect if the settings were not changed.
[ "$PATH" = "fail" ] && echo "Failed to load PATH setting." && exit 1
[ "$SVCDIR" = "fail" ] && echo "Failed to load service directory location setting." && exit 1

# set the service to point to its associated definition
INSTANCE=$SVCDIR/$MYNAME

# load settings for the supervision environment
# includes SVCCTRL, CMDSTART, CMDSTOP
. $MYHOME/supervisor-settings

# detect if the settings were not changed.
[ "$SVCCTRL" = "fail" ] && echo "Failed to load service control setting." && exit 1
[ "$SVCSTATUS" = "fail" ] && echo "Failed to load service status setting." && exit 1
[ "$CMDSTOP" = "fail" ] && echo "Failed to service stop setting." && exit 1
[ "$CMDSTART" = "fail" ] && echo "Failed to load service start setting." && exit 1


case "$1" in
  start)
    # Detect if there is no definition present.  If so,
    # copy the default definition to the active service directory
    # because we are explicitly asking it to start.
    [ ! -d $INSTANCE ] && \
        cp -Rav $SVCDEF/$MYNAME $INSTANCE || \
            echo "Failed to create service definition." && \
            exit 1
    # Ask the supervisor to start the daemon.
    $SVCCTRL $CMDSTART $MYNAME
    exit $?
    ;;
  stop)
    # Ask the supervisor to stop the daemon.
    $SVCCTRL $CMDSTOP $MYNAME
    exit $?
    ;;
  restart)
    # Ask the supervisor to stop, then start the daemon.
    $SVCCTRL $CMDSTOP $MYNAME && $SVCCTRL $CMDSTART $MYNAME
    exit $?
    ;;
  status)
    # Ask the supervisor about the status of the daemon.
    $SVCSTATUS $MYNAME
    exit $?
    ;;
  reload)
    # Intercept any reload calls and turn them into a failure,
    # as we do not have a consistent method for telling a
    # daemon to reload its settings.

    # This is by design.  If there are rc scripts that
    # depend on this feature, they should receive a failure
    # indication instead of silently accepting the operation
    # as a success.
    echo "reload is not a supported operation."
    exit 1
    ;;
  *)
    # Provide a catch-all to explain what are valid commands.
    echo "Usage: $MYNAME {start|stop|restart|status}"
    exit 1
    ;;
esac

exit 0
