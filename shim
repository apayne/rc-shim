#!/bin/sh

### BEGIN INIT INFO
# Provides:          shim
# Required-Start:
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Shim to launch a supervisor.
# Description:       Shim to launch a supervisor.
### END INIT INFO

# The following variables are defined:

# In this script:
# MYHOME      the detected location of init.d scripts
# MYNAME      the name of this script as called
# SVCNAME     the name of the service
# SVCDEFNAME  the path name of the service definition
# LIVESVC    the path name of the live service

# In os-settings:
# PATH     the file path to be searched by this script
# SVCDEF   the location of all service definitions
# SVCDIR   the location of all active services

# In supervisor-settings:
# SVCCTRL   the command used to control the supervisor
# SVCSTATUS the command to return the status of the supervised daemon
# CMDSTART  the command to be issued to the supervisor for staring the daemon
# CMDSTOP   the command to be issued to the supervisor for stopping the daemon



# Where do I live? (i.e. where is my init.d collection)
MYHOME=$( dirname $0 )

# What is my (script) name?
MYNAME=$( basename $0 )

# What is my (daemon) name?
SVCNAME=$MYNAME

# By default, the service definition name is the same as $MYNAME, but in
# some cases you may wish to have a different service definition.  When
# that happens, simply uncomment and change the line below.
#SVCNAME="unknown"

# What service definition should I use to control the daemon?
SVCDEFNAME=$SVCDEF/$SVCNAME

# Where is the (live) supervision directory for the daemon?
LIVESVC=$SVCDIR/$SVCNAME



# load settings for distribution
# includes PATH
. $MYHOME/os-settings

# detect if the settings were not changed.
[ "$PATH" = "fail" ] && echo "Failed to load PATH setting." && exit 1
[ "$SVCDIR" = "fail" ] && echo "Failed to load service directory location setting." && exit 1



# load settings for the supervision environment
# includes SVCCTRL, CMDSTART, CMDSTOP
. $MYHOME/supervisor-settings

# detect if the settings were not changed.
[ "$SVCCTRL" = "fail" ] && echo "Failed to load service control setting." && exit 1
[ "$SVCSTATUS" = "fail" ] && echo "Failed to load service status setting." && exit 1
[ "$CMDSTOP" = "fail" ] && echo "Failed to service stop setting." && exit 1
[ "$CMDSTART" = "fail" ] && echo "Failed to load service start setting." && exit 1


# Pre-check that $LIVESVC exists, otherwise
# any supervisor command is guaranteed to fail.
if [ ! -d $LIVESVC ];
then
  echo "$MYNAME: no live definition exists at $LIVESVC"
fi


# Process the request
case "$1" in
  start)
    # Ask the supervisor to start the daemon.
    $SVCCTRL $CMDSTART $LIVESVC
    exit $?
    ;;
  stop)
    # Ask the supervisor to stop the daemon.
    $SVCCTRL $CMDSTOP $LIVESVC
    exit $?
    ;;
  restart)
    # Ask the supervisor to stop, then start the daemon.
    $SVCCTRL $CMDSTOP $LIVESVC && $SVCCTRL $CMDSTART $LIVESVC
    exit $?
    ;;
  status)
    # Ask the supervisor about the status of the daemon.
    $SVCSTATUS $MYNAME
    exit $?
    ;;
  reload)
    # Intercept any reload calls and turn them into a failure,
    # as we do not have a consistent method for telling a
    # daemon to reload its settings.

    # This is by design.  If there are rc scripts that
    # depend on this feature, they should receive a failure
    # indication instead of silently accepting the operation
    # as a success.
    echo "reload is not a supported operation."
    exit 1
    ;;
  *)
    # Provide a catch-all to explain what are valid commands.
    echo "Usage: $MYNAME {start|stop|restart|status}"
    exit 1
    ;;
esac

exit 0
